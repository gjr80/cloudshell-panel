#!/usr/bin/env python3
#
#
"""Manipulate the Cloudshell2 LCD.

A Python 3 based script to display selected system details on a Cloudshell2 LCD.

Inspired by the Odroid XU4 cloudshell-lcd script by Kyle Lee
https://bazaar.launchpad.net/~kyle1117/+junk/cloudshell-lcd/view/head:/bin/cloudshell-lcd

Compatibility

    This script works on the Cloudshell2 LCD and requires Python 3 or later.

    Development and testing was conducted using Armbian ?.?? Odroid XU4 Debian
    Bullseye (11.1) image using the mainline kernel (?.?.?).


Design

    The script defines a class, CloudshellLcd, that is used to manipulate the
    Cloudshell2 LCD. A number of utility functions are used obtain system
    information for display on the LCD. A config file,
    /etc/cloudshell-panel.conf, is used to set various display properties.

    The script has been designed to run as a service.


Pre-requisites

    The following additional python packages are required:
        -   configobj (python3-configobj)
        -   netifaces (python3-netifaces)
        -   psutil (python3-psutil)


Configuration

    A number of parameters can be defined in /etc/cloudshell-panel.conf to
    determine the information displayed as well as its look and feel.

#
# This file contains the config setting for the python based cloudshell-panel
# script/service
#

# Device used to write to LCD. String, default is /dev/tty1
device = /dev/tty1

# Period in seconds between display updates. Values less than 2 can result in
# some display instability.
update_interval = 2

# Format used for display of date-time. Uses python strftime format directives
# refer https://docs.python.org/2/library/datetime.html.
# String, default %-d %B %Y %H:%M:%S
date_time_format = '%-d %B %Y %H:%M:%S'


#
# Display colour settings
#

# Colour to be used for labels o the display. String, default is white.
label_colour = white

# Colour to be used for non-colour coded data. String, default is cyan.
data_colour = cyan


#
# Network interface settings
#

# As of Debian Stretch the old network names like eth0, eth1 have been
# deprecated as the device name can change. Clean Debian Stretch installs have
# implemented predictable interface names such as enp6s0, enp8s0,
# enx001e0630760c etc. Previously cloudshell-panel displayed the IP address of
# the eth0 interface, this approach will no longer work so the interface name
# used by cloudshell-panel to display the IP address can now be specified using
# the network_interface_name config option.
network_interface_name = enx001e0630760c


#
# CPU temperature display settings.
#

# Many Linux variants make CPU (and other) temperature available by reading a
# file object. The XU4 makes temperature available in
# /sys/class/thermal/thermal_zone0/temp, /sys/class/thermal/thermal_zone1/temp,
# /sys/class/thermal/thermal_zone2/temp, /sys/class/thermal/thermal_zone3/temp
# and /sys/class/thermal/thermal_zone4/temp.
# File like object to be used for displaying CPU temperature. String, default
# /sys/class/thermal/thermal_zone0/temp.
cpu_temp_location = '/sys/class/thermal/thermal_zone0/temp'

# The CPU temperature display colour can be changed depending on temperature.
# Three temperature bands are supported and these are defined by cpu_temp1 and
# cpu_temp2. CPU temperatures below cpu_temp1 are displayed in the colour set
# by cpu_temp_normal, CPU temperatures >= cpu_temp1 and <cpu_temp2 are
# displayed in the colour set by cpu_temp_colour1. CPU temperatures >=cpu_temp2
# are displayed in the colour set by cpu_temp_colour2.

# Colour used for CPU temperature < cpu_temp1. String, default is light green.
cpu_temp_colour_normal = light green

# Temperature in C above which CPU temperature is displayed using cpu_temp_colour1.
# Number, default 80.
cpu_temp1 = 80

# Colour used for CPU temperature >= cpu_temp1 and < cpu_temp2. String, default
# is light yellow.
cpu_temp_colour1 = light yellow

# Temperature in C above which CPU temperature is displayed using cpu_temp_colour2.
# Number, default 90.
cpu_tempe2 = 90

# Colour used for CPU temperature >= cpu_temp2. String, default is light red.
cpu_temp_colour2 = light red


#
# Mounted hard disk display settings
#

# The hdd_display option is used to determine which mounted devices (maximum 3)
# will be displayed on the Cloudshell2 LCD. The hdd_display option is a comma
# separated list of strings. Only devices that match one or more of the
# hdd_display option list items may be displayed. If a hdd_display list item
# ends with an asterisk then a wild card search is conducted against all device
# names using the characters preceding the asterisk. Otherwise the hdd_display
# list items specify exact device name matches.
# For example:
#   hdd_display = /dev/sda1, /dev/sda2 would match /dev/sda1 and /dev/sda2 but
#                 not /dev/sda3
#   hdd_display = /dev/sda1, /dev/sdb* would match /dev/sda1 and /dev/sdb1 but
#                 not /dev/sda2
#   hdd_display = /dev/sda1* would match /dev/sda1 and /dev/sda11 but not
#                 /dev/sda2 or /dev/sdb1
# If more than 3 devices are identified for display then only the first 3 are
# displayed.
hdd_display = /dev/sda1, /dev/sda2, /dev/sda3

# The hard disk usage display colour can be changed depending on the percentage
# level of disk usage. Three bands are supported and these are defined by
# hdd_usage1 and hdd_usage2. Disk usage below hdd_usage1 are displayed in the
# colour set by hdd_usage_colour_normal, hard disk usage >= hdd_usage1 and
# < hdd_usage2 are displayed in the colour set by hdd_usage_colour1. Hard disk
# usage >= hdd_usage2 is displayed in the colour set by hdd_usage_colour2.

# Colour used for hard disk usage < hdd_usage1. String, default is light green.
hdd_usage_colour_normal = light green

# Hard disk usage in % above which hard disk usage is displayed using
# hdd_usage_colour1. Number, default 75.
hdd_usage1 = 75

# Colour used for hard disk usage >= hdd_usage1 and < hdd_usage2. String, default
# is light yellow.
hdd_usage_colour1 = light yellow

# Hard disk usage in % above which hard disk usage is displayed using
# hdd_usage_colour2. Number, default 90.
hdd_usage2 = 90

# Colour used for hard disk usage >= hdd_usage2. String, default is light red.
hdd_usage_colour2 = light red


Known Issues

    -   use of update periods less than 2 seconds sometimes results in flashing
        of the bottom few (pixel) lines of the display.
"""
from __future__ import with_statement

# python imports
import datetime
import distro
import os.path
import platform
import socket
import time

from collections import namedtuple

# external imports
import configobj
import netifaces
import psutil

# script version number
CSP_VER = "0.2.0"

# set some constants
CONFIG_PATH = '/etc/cloudshell-panel.conf'
COLOUR_MAP = {'black': '30',
              'red': '31',
              'green': '32',
              'yellow': '33',
              'blue': '34',
              'magenta': '35',
              'cyan': '36',
              'light gray': '37',
              'dark gray': '90',
              'light red': '91',
              'light green': '92',
              'light yellow': '93',
              'light blue': '94',
              'light magenta': '95',
              'light cyan': '96',
              'white': '97'}
REVERSE = '7'
ESC = '\x1b'
RESET = ''.join([ESC, '[0m'])
CLEAR_SCREEN = ''.join([ESC, 'c'])


# ============================================================================
#                            class CloudshellLcd
# ============================================================================

class CloudshellLcd(object):
    """Class to handle interaction with a Cloudshell LCD."""

    def __init__(self):
        """Initialise the class."""

        # read cloudshell-panel config if it exists
        if os.path.isfile(CONFIG_PATH):
            config_dict = configobj.ConfigObj(CONFIG_PATH, file_error=True)
        else:
            config_dict = {}

        # now set some parameters based on the config settings, if they are not
        # available then use sane defaults

        # device used to write to display, default is /dev/tty1
        self.device = config_dict.get('device', '/dev/tty1')
        # lcd label colour, default is white
        self.label_colour = config_dict.get('label_colour', 'white')
        # lcd data colour, default is cyan
        self.data_colour = config_dict.get('data_colour', 'cyan')
        # network interface name
        self.network_interface_name = config_dict.get('network_interface_name')
        # cpu temperature
        # cpu temperature 'location'
        self.cpu_temp_location = config_dict.get('cpu_temp_location',
                                                 '/sys/class/thermal/thermal_zone0/temp')
        # cpu temperature normal colour
        self.cpu_temp_colour_normal = config_dict.get('cpu_temp_colour_normal',
                                                      'light green')
        # cpu temperature1 colour
        self.cpu_temp_colour1 = config_dict.get('cpu_temp_colour1',
                                                'light yellow')
        # cpu temperature2 colour
        self.cpu_temp_colour2 = config_dict.get('cpu_temp_colour2',
                                                'light red')
        # cpu temperature1
        self.cpu_temp1 = int(config_dict.get('cpu_temp1', 80))
        # cpu temperature2
        self.cpu_temp2 = int(config_dict.get('cpu_temp2', 90))
        # hdd usage
        # hdd display - a list of device names to match for mounted partitions
        self.hdd_display = option_as_list(config_dict.get('hdd_display', None))
        self.hdd_display = None if self.hdd_display == [''] else self.hdd_display
        # hdd usage normal colour
        self.hdd_usage_colour_normal = config_dict.get('hdd_usage_colour_normal',
                                                       'light green')
        # hdd usage1 colour
        self.hdd_usage_colour1 = config_dict.get('hdd_usage_colour1',
                                                 'light yellow')
        # hdd usage2 colour
        self.hdd_usage_colour2 = config_dict.get('hdd_usage_colour2',
                                                 'light red')
        # hdd usage1
        self.hdd_usage1 = int(config_dict.get('hdd_usage1', 75))
        # hdd usage2
        self.hdd_usage2 = int(config_dict.get('hdd_usage2', 90))
        # date-time display format
        self.date_time_format = config_dict.get('date_time_format',
                                                '%-d %B %Y %H:%M:%S')
        # lcd refresh period
        self.update_interval = int(config_dict.get('update_interval', 2))
        # file type object used to write to the LCD
        self.lcd = None

    def open_lcd_device(self):
        """Open a tty device for Cloudshell LCD.

        Obtain a file type object to be used to write to the LCD.
        """

        self.lcd = open(self.device, 'w')
        # self.lcd = open(self.device, 'w', 0)

    def close_lcd_device(self):
        """Close Cloudshell LCD tty device.

        If it was opened close the file used to write to the LCD.
        """

        if self.lcd is not None:
            self.lcd.close()

    def write(self, string, colour='light gray', reverse=False,
              new_line=False, width=''):
        """Write a string on the Cloudshell LCD.

        Write a string to the LCD with limited formatting controls. The display
        attributes are reset using ANSI code ESC[0m once the string has been
        written to the display.

        Inputs:
            str:      The string to be written to the LCD. String.
            colour:   Colour to be used when 'str' is displayed on the LCD.
                      String, default is 'light gray'.
            reverse:  Display 'str' in reverse. Boolean, default is False.
            new_line: Add a new line ('\n') character to the end of the string
                      to be displayed. Boolean, default is False.
            width:    Sets the display field and justification used to display
                      'string'. 'string' is displayed in a field of 'width'
                      characters. If 'width' is negative 'str' is left
                      justified in the field, otherwise 'str' is right
                      justified within the field.
        """

        # if the displayed has been 'opened' and there is data to write
        if self.lcd is not None and string is not None:
            # build a list of to be used to display the data
            _attr_list = [REVERSE] if reverse else []
            if colour in COLOUR_MAP:
                _attr_list.append(COLOUR_MAP[colour])
            # if there are any display attributes then write them to the
            # display first
            if len(_attr_list) > 0:
                self.lcd.write(''.join([ESC, '[', ';'.join(_attr_list), 'm']))
            # obtain the format string to be used to format the data
            _format_str = '%s' if width == '' else '%%%s.%ss' % (width, abs(width))
            # format the data to be displayed based on the width parameter
            _str = ''.join([_format_str % string, '\n']) if new_line else _format_str % string
            # write the data to the screen
            self.lcd.write(_str)
            # send an ANSI reset escape code
            self.lcd.write(RESET)

    def clear_screen(self):
        """Clear the LCD.

        Write the ANSI escape code ESC c to clear the screen."""

        self.lcd.write(CLEAR_SCREEN)

    def display_header(self):
        """Display the page header.

        Gather and display the page header."""

        # display host name
        self.write('Host: ', self.label_colour)
        self.write(get_host_name(), colour=self.data_colour, width=-14)
        # display IP
        self.write('IP: ', self.label_colour)
        self.write(get_ip(self.network_interface_name), self.data_colour, new_line=True)
        # display OS
        self.write('OS: ', self.label_colour)
        self.write(' '.join(get_os()).capitalize(), self.data_colour, new_line=True)
        # display kernel version
        self.write('Kernel: ', self.label_colour)
        self.write(get_kernel(), self.data_colour, width=-12)
        # display human readable uptime
        self.write('Uptime: ', self.label_colour)
        _uptime_str = format_elapsed_seconds(get_system_uptime())
        self.write(_uptime_str, self.data_colour, new_line=True)
        # display CPU usage
        self.write('CPU Usage: ', self.label_colour)
        self.write(get_cpu_usage() + '%', self.data_colour, width=-9)
        # display CPU temperature; colour coded green, light yellow and light
        # red based upon user defined temperature intervals
        self.write('CPU Temp: ', self.label_colour)
        cpu_temp = get_cpu_temp(self.cpu_temp_location)
        if cpu_temp > self.cpu_temp2:
            cpu_temp_colour = 'light red'
        elif cpu_temp > self.cpu_temp1:
            cpu_temp_colour = 'light yellow'
        else:
            cpu_temp_colour = 'light green'
        self.write(''.join((str(cpu_temp), 'C')), cpu_temp_colour, new_line=True)
        self.write('', new_line=True)

    def display_hdd(self):
        """Display the page header.

        Gather and display the page header."""

        pass

    def display_date_time(self, new_line=False):
        """Display current date and time.

        Displays current system data and time centred on a single line.
        Optionally includes a new line at the end of the line.
        """

        _date_time_str = datetime.datetime.fromtimestamp(time.time()).strftime(self.date_time_format)
        _length = len(_date_time_str)
        self.write(_date_time_str, width=_length + ((39 - _length) // 2), new_line=new_line)


# ============================================================================
#                             Utility Functions
# ============================================================================

def get_os():
    """Get host operating system info.

    Determine the Linux OS distribution name.
    Refer https://distro.readthedocs.io/en/latest/

    Minor formatting of codename to enclose in brackets.

    Returns:
        A 3-way tuple (distribution name, version, codename)
    """

    return distro.id(), distro.version(), "(%s)" % distro.codename()


def get_kernel():
    """Get host kernel version.

    Obtain uname info from platform and manipulates the 'release' element of
    the uname tuple to obtain the kernel version number.
    Refer https://docs.python.org/2/library/platform.html#cross-platform

    Returns:
        String containing the kernel version number.
    """

    return platform.uname()[2].split('-', 1)[0]


def get_host_name():
    """Get the host name.

    Returns:
        String containing the hostname.
    """

    return socket.gethostname()


def get_ip(interface_name=None):
    """Get the ip address of a given network interface.

    Obtains the AF_INET address for the first address of the designated network
    interface using the netifaces module. If no interface name is given or it is
    None then an empty string is returned.

    Returns:
        String containing the first AF_INET address of the designated network
        interface.
    """

    if interface_name is not None:
        return netifaces.ifaddresses(interface_name)[netifaces.AF_INET][0]['addr']
    else:
        return ''


def get_cpu_usage():
    """Get CPU usage in percent.

    Uses module psutil to obtain the current system-wide CPU utilization as a
    percentage. Note, when first called psutil.cpu_percent() will return 0.0.

    Returns:
        String containing the current system-wide CPU utilization as a
        percentage.
    """

    return str(psutil.cpu_percent())


def get_cpu_temp(location):
    """Get CPU temperature.

    Obtains the CPU temperature from file
    /sys/class/thermal/thermal_zone0/temp.

    Returns:
        Number containing the current CPU temperature in degrees C.
    """

    def cat(file): return open(file, 'r').read().strip()
    return int(cat(location))/1000


def get_system_uptime():
    """Get system uptime in seconds.

    Calculates the number of elapsed seconds since the system was booted.

    Returns:
        Number of elapsed seconds since the system was booted.
    """

    return time.time() - psutil.boot_time()


def get_hdd_info(hdd_display=None):
    """Get information on mounted hard disks.

    Obtains mount point and disk usage information for each mounted partition
    that matches the template device names in 'hdd_display'. Disk usage
    information is provided as a human readable string of up to 4 characters in
    length with an identify unit letter and 0 or 1 decimal place.

    Input:
        hdd_display: None or list of device name specs.

    Returns:
        List of 6-way named tuples, 1 tuple per partition. Tuple fields are
            - 'device'. Device name.
            - 'mountpoint'. Device mount point.
            - 'total'. Partition size.
            - 'used'. Partition usage.
            - 'free'. Partition space free.
            - 'percent'. Percentage of partition space free.
        The 'percent' field is numeric and all other fields are strings.
        Disk usage/free information is provided as a human readable string of
        up to 4 characters in length with an identifying unit letter and 0 or
        1 decimal places; eg 1.0G, 10T, 237M.
    """

    # if we have no specs to match then return an empty list
    if hdd_display is None:
        return []
    else:
        # we have something to match against
        # first get a list of named tuples with our partitions
        _partitions = psutil.disk_partitions()
        # create a set to hold our results, a set will exclude duplicates
        _parts = set()
        # iterate over each device name spec in our list
        for _match in hdd_display:
            # do we have a wild card match
            if _match.endswith('*'):
                # we have a wild card to match
                # get the all before the wild card
                _mask = _match[:-1]
                # add any matching devices to our results
                _parts |= {a for a in _partitions if a.device.startswith(_mask)}
            else:
                # non-wild card search so add precise matches only
                _parts |= {a for a in _partitions if a.device == _match}
        # create a named tuple for our results
        use = namedtuple('Drive', ['device', 'mountpoint', 'total', 'used', 'free', 'percent'])
        # initialise our result list
        _info = []
        # iterate over the mounted partitions we are interested in and create a
        # list with our final results
        for _part in _parts:
            _usage = psutil.disk_usage(_part.mountpoint)
            _info.append(use(_part.device, _part.mountpoint,
                             bytes2human(_usage.total), bytes2human(_usage.used),
                             bytes2human(_usage.free), _usage.percent))
        return _info


def format_elapsed_seconds(elapsed):
    """Format elapsed seconds to a human readable string.

    Returns a string of the form xdays yhours zminutes representing the number
    of elapsed seconds. If x or y is 0 then that term is omitted.

    >>> format_elapsed_seconds(2)
    0m
    >>> format_elapsed_seconds(3678)
    1h 1m
    >>> format_elapsed_seconds(609389)
    7d 1h 16m
    """

    _sec = int(elapsed)
    days, _sec = divmod(_sec, 86400)
    hours, _sec = divmod(_sec, 3600)
    minutes, _sec = divmod(_sec, 60)
    if days > 0:
        return '%dd %dh %dm' % (days, hours, minutes)
    elif hours > 0:
        return '%dh %dm' % (hours, minutes)
    elif minutes > 0:
        return '%dm' % minutes
    else:
        return '0m'


def bytes2human(n):
    """Format a number of bytes into a short, human readable string.

    'n' is interpreted as a binary (rather than decimal) number of bytes and
    converted into a short string of 3 or 4 characters including a trailing
    unit letter.

    Based upon https://code.activestate.com/recipes/578019
        Author: Giampaolo Rodola' <g.rodola [AT] gmail [DOT] com>
        License: MIT

    >>> bytes2human(10000)
    9.8K
    >>> bytes2human(100001221)
    95M

    """

    symbols = ('K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y')
    prefix = {}
    for i, s in enumerate(symbols):
        prefix[s] = 1 << (i + 1) * 10
    for s in reversed(symbols):
        if n >= prefix[s]:
            value = float(n) / prefix[s]
            if value <= 10.0:
                return '%.1f%s' % (value, s)
            else:
                return '%.0f%s' % (value, s)
    return "%sB" % n


def option_as_list(option):

    if option is None or hasattr(option, '__iter__'):
        return option
    else:
        return [option]


# ============================================================================
#                                    Main
# ============================================================================

def main():

    # get a CloudshellLCD object
    lcd = CloudshellLcd()
    # open the display for writing
    lcd.open_lcd_device()
    # get the current time
    old_time = int(time.time())
    while True:
        # clear the screen
        lcd.clear_screen()
        # write the date and time to the screen
        lcd.display_date_time(new_line=True)
        # display the header info
        lcd.display_header()
        # get hard disk info
        hdd_info = get_hdd_info(lcd.hdd_display)
        hdd_count = 0
        # iterate over mounted hard disk partitions
        for hdd in hdd_info:
            # set colour to be used for disk usage percent and disk free
            # values; colour coded green, light yellow and light red based upon
            # user defined intervals for percent used
            if hdd.percent > lcd.hdd_usage2:
                hdd_colour = 'light red'
            elif hdd.percent > lcd.hdd_usage1:
                hdd_colour = 'light yellow'
            else:
                hdd_colour = 'light green'
            # disk concerned and mount point
            lcd.write('Disk: ', lcd.label_colour)
            disk_str = ''.join([hdd.device, ' (', hdd.mountpoint, ')'])
            lcd.write(disk_str, lcd.data_colour, width=-33, new_line=True)
            # usage
            lcd.write('Usage: ', lcd.label_colour)
            lcd.write(''.join([hdd.used, '/', hdd.total]), lcd.data_colour,
                      width=-10)
            usage_str = ''.join(['(', str(hdd.percent), '%)'])
            lcd.write(usage_str, hdd_colour, width=-9)
            # free space
            lcd.write(' Free: ', lcd.label_colour)
            lcd.write(hdd.free, hdd_colour, new_line=True)
            hdd_count += 1
            # only have room for 3 hdd, so if we have processed 3 then break
            if hdd_count >= 3:
                break
        while int(time.time()) <= old_time + lcd.update_interval - 1:
            time.sleep(0.2)
        old_time = int(time.time())
    # if we get here we are done and we should close the display
    lcd.close_lcd_device()


if __name__ == "__main__":
    main()
